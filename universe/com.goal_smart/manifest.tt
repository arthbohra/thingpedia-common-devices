// Copyright 2021 Arth Bohra <arthbohra@gmail.com>
//           2018-2021 Dougherty Valley High School
//
// Redistribution and use in source and binary forms, with or
// without modification, are permitted provided that the following
// conditions are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above
//    copyright notice, this list of conditions and the following
//    disclaimer in the documentation and/or other materials
//    provided with the distribution.
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
// COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
// OF THE POSSIBILITY OF SUCH DAMAGE.



class @com.goal_smart
  #_[thingpedia_name="GoalSmart"]
  #_[thingpedia_description="Keep up with the latest in soccer."]
  #_[description="Keep up with the latest in soccer."]
  #[license="MIT"]
  #[license_gplcompatible=true]
  #[subcategory="media"]

{
  import loader from @org.thingpedia.v2();
  import config from @org.thingpedia.config.none(api_key=$?);

  entity soccer_team #_[description="Soccer Teams in the World"];
  entity soccer_league #_[description="Soccer Leagues in the World"];
  entity soccer_player #_[description="Soccer Players in the World"];

  monitorable list query standings(in req league_id: Entity(com.goal_smart:soccer_league) #_[prompt="what league standings do you want out check out"],
                        out team : Entity(com.goal_smart:soccer_team)
                        #_[canonical={
                          base=["team", "side", "group"],
                          reverse_verb_projection=['played', 'participated', 'competed', 'competing', 'playing', 'participating']
                        }],
                        out rank: Number
                        #_[canonical = {
                          base = ["rank", "placement"],
                          property = ["rankings of #", "# placement", "placement of #"],
                        }],
                        out form: Array(String)
                        #_[canonical = {
                          base = ["form", "momentum"],
                          property = ["form of #"]
                        }],
                        out points: Number
                        #_[canonical = {
                          base = ["results", "points"],
                        }])
  #_[canonical=["team standings", "team rankings", "team rankings", "team table", "team table"]]
  #_[confirmation="league standings of $league"]
  #_[result = ["${rank} . ${team} Form: ${form} Points: ${points}"]]
  #[poll_interval=3600000ms]
  #[doc="Get the standings of a league"];


  monitorable list query fixtures(in req team_id: Entity(com.goal_smart:soccer_team) #_[prompt="what team do you want out check out"],
                        out league : Entity(com.goal_smart:soccer_league)
                        #_[canonical = {
                          base = ["league", "division"]
                        }],
                        out our_team: Entity(com.goal_smart:soccer_team)
                        #_[canonical = {
                          base = ["team one", "side one", "group one"]
                        }],
                        out opposition_team: Entity(com.goal_smart:soccer_team)
                        #_[canonical = {
                          base = ["team two", "side two", "group two"],
                          verb = ["plays against #", "faces #", "faces against # ", "play # next", "played", "play against # next"]
                        }],
                        out score: String
                        #_[canonical = {
                          base = ["score", "result", "outcome"]
                        }],
                        out result: Enum(tied, won, lost, play)
                        #_[canonical = {
                          base = ["result", "final", "outcome"]
                        }],
                        out date: Date
                        #_[canonical = {
                          base = ["date", "time", "duration"]
                        }],
                        out venue: String
                        #_[canonical = {
                          base = ["location", "place", "venue"]
                        }])
  #_[canonical=["soccer fixture", "soccer match", "soccer game", "upcoming soccer game"]]
  #_[confirmation="fixtures of $team_id"]
  #_[result=["${our_team} ${result} against ${opposition_team} on ${date} at ${venue} for the ${league}. The score ${score}"]]
  #[poll_interval=3600000ms]
  #[doc="Get the fixtures of the team"];


  monitorable list query player(in req league_id: Entity(com.goal_smart:soccer_league) #_[prompt="what league do you want out check out"],
                        out id: Entity(com.goal_smart:soccer_player)
                        #_[canonical = {
                          base = ["person", "athlete", "teammate", "player"]
                        }],
                        out goals: Number
                        #_[canonical = {
                          base = ["goal", "point", "score", "conversion"]
                        }],
                        out assists: Number
                        #_[canonical = {
                          base = ["assist"]
                        }],
                        out red_cards: Number
                        #_[canonical = {
                          base = ["red card", "send off", "ejection"]
                        }],
                        out yellow_cards: Number
                        #_[canonical = {
                          base = ["yellow card", "caution", "warning"]
                        }],
                        out appearances: Number
                        #_[canonical = {
                          base = ["app", "appearance", "game played", "game", "match played", "match"]
                        }],
                        out minutes: Number
                        #_[canonical = {
                          base = ["minute", "time played", "time"]
                        }],
                        out shots: Number
                        #_[canonical = {
                          base = ["shot", "goal attempt", "attempts"]
                        }],
                        out shots_on_target: Number
                        #_[canonical = {
                          base = ["accurate shot", "shot on target", "targetted shot"]
                        }],
                        out passes: Number
                        #_[canonical = {
                          base = ["pass"]
                        }],
                        out key_passes: Number
                        #_[canonical = {
                          base = ["key pass", "crucial pass", "important pass", "goal oppurtunity"]
                        }],
                        out pass_accuracy: Number
                        #_[canonical = {
                          base = ["pass accuracy", "accuracy percentage", "pass accuracy percentage"]
                        }],
                        out dribble_attempts: Number
                        #_[canonical = {
                          base = ["dribble", "dribble attempt", "run"]
                        }],
                        out successful_dribbles: Number
                        #_[canonical = {
                          base = ["successful dribble", "completed dribble", "successful run", "completed run"]
                        }],
                        out tackles: Number
                        #_[canonical = {
                          base = ["tackle", "forced turnover", "steal"]
                        }],
                        out blocks: Number
                        #_[canonical = {
                          base = ["block", "rejection"]
                        }],
                        out interceptions: Number
                        #_[canonical = {
                          base = ["interception", "collection", "ball won"]
                        }])
  #_[canonical=["player stats", "player list", "league player stats", "individual stats", "player statistics", "player analysis"]]
  #_[confirmation="top players of $league_id"]
  #_[result={
    top="${id} has scored ${goals} goals this season. They have had ${assists} assists. After playing ${minutes} minutes in ${appearances} appearances in the league, they had ${yellow_cards} yellow cards and ${red_cards} red cards. ${id} took ${shots} shots, ${shots_on_target} of which were on target. They made a total of ${passes} passes, ${key_passes} key passes, with a passing accuracy of ${pass_accuracy} percent. ${id} took ${dribble_attempts} dribble attempts, and ${successful_dribbles} of them were successful. They made ${tackles} tackles, ${interceptions} interceptions, and ${blocks} blocks.",
    list="${id} has scored ${goals} goals this season. They have had ${assists} assists. After playing ${minutes} minutes in ${appearances} appearances in the league, they had ${yellow_cards} yellow cards and ${red_cards} red cards. ${id} took ${shots} shots, ${shots_on_target} of which were on target. They made a total of ${passes} passes, ${key_passes} key passes, with a passing accuracy of ${pass_accuracy} percent. ${id} took ${dribble_attempts} dribble attempts, and ${successful_dribbles} of them were successful. They made ${tackles} tackles, ${interceptions} interceptions, and ${blocks} blocks."
  }]
  #[poll_interval=3600000ms]
  #[doc="Get the top scorers of the league"];


  monitorable query teamUpdate(in req team_id: Entity(com.goal_smart:soccer_team) #_[prompt="what team do you want out check out "],
                        out team : Entity(com.goal_smart:soccer_team)
                        #_[canonical = {
                          base = ["team", "side", "group"]
                        }],
                        out last_opponent: Entity(com.goal_smart:soccer_team)
                        #_[canonical = {
                          base = ["last opponent", "previous opponent", "last opponent", "last matchup", "opposition team", "opposition side", "opposition group"]
                        }],
                        out score_of_last_match: String
                        #_[canonical = {
                          base = ["score of last match", "result", "final", "outcome", "score"]
                        }],
                        out league: Entity(com.goal_smart:soccer_league)
                        #_[canonical = {
                          base = ["league", "division"]
                        }],
                        out league_ranking: Number
                        #_[canonical = {
                          base = ["placement", "rank", "position", "place", "league ranking"]
                        }])
  #_[canonical=["team updates", "team information", "team info", "team overview", "team summary"]]
  #_[confirmation="overall summary of $team_id"]
  #_[result=["${team} is currently number ${league_ranking} in the ${league}. Their last match was against ${last_opponent} and the score was ${score_of_last_match}"]]
  #[poll_interval=3600000ms]
  #[doc="Get the overall summary on the performance of the team"];

}
